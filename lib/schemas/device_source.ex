defmodule FwdClient.DeviceSource do
  @moduledoc """
  Provides struct and type for a DeviceSource
  """
  use FwdClient.Encoder

  @type t :: %__MODULE__{
          __info__: map,
          bgpPeerType: String.t() | nil,
          bgpSubnetsToCollect: [String.t()] | nil,
          bgpTableType: String.t() | nil,
          collectBgpAdvertisements: boolean | nil,
          disableCollection: boolean | nil,
          disableIpv6Collection: boolean | nil,
          fullCollectionLog: boolean | nil,
          host: String.t(),
          jumpServerId: String.t() | nil,
          keyStoreId: String.t() | nil,
          largeRtt: boolean | nil,
          loginCredentialId: String.t() | nil,
          name: String.t(),
          note: String.t() | nil,
          openFlow: FwdClient.OpenFlowConfig.t() | nil,
          paginationMode: String.t() | nil,
          port: integer | nil,
          privilegedModePasswordId: String.t() | nil,
          shellCredentialId: String.t() | nil,
          type: String.t()
        }

  defstruct [
    :__info__,
    :bgpPeerType,
    :bgpSubnetsToCollect,
    :bgpTableType,
    :collectBgpAdvertisements,
    :disableCollection,
    :disableIpv6Collection,
    :fullCollectionLog,
    :host,
    :jumpServerId,
    :keyStoreId,
    :largeRtt,
    :loginCredentialId,
    :name,
    :note,
    :openFlow,
    :paginationMode,
    :port,
    :privilegedModePasswordId,
    :shellCredentialId,
    :type
  ]

  @doc false
  @spec __fields__(atom) :: keyword
  def __fields__(type \\ :t)

  def __fields__(:t) do
    [
      bgpPeerType: {:enum, ["BOTH", "EBGP", "IBGP"]},
      bgpSubnetsToCollect: [string: :generic],
      bgpTableType: {:enum, ["BOTH", "ADJ_RIB_IN", "ADJ_RIB_OUT"]},
      collectBgpAdvertisements: :boolean,
      disableCollection: :boolean,
      disableIpv6Collection: :boolean,
      fullCollectionLog: :boolean,
      host: {:string, :generic},
      jumpServerId: {:string, :generic},
      keyStoreId: {:string, :generic},
      largeRtt: :boolean,
      loginCredentialId: {:string, :generic},
      name: {:string, :generic},
      note: {:string, :generic},
      openFlow: {FwdClient.OpenFlowConfig, :t},
      paginationMode: {:enum, ["KEEP_UNCHANGED", "DISABLE_PAGINATION", "ENABLE_PAGINATION"]},
      port: :integer,
      privilegedModePasswordId: {:string, :generic},
      shellCredentialId: {:string, :generic},
      type:
        {:enum,
         [
           "aruba_controller_ssh",
           "aruba_switch_ssh",
           "128t_conductor_full",
           "128t_conductor",
           "128t_router",
           "a10_acos_ssh",
           "arista_eos_ssh",
           "avi_controller_ssh",
           "avi_controller_ssh_cli_user",
           "avi_controller_ssh_via_host",
           "avi_controller_https_api",
           "avi_controller_http_api",
           "bluecoat_ssh",
           "cisco_ios_ssh",
           "cisco_ios_telnet",
           "cisco_ios_xe_ssh",
           "cisco_ios_xe_telnet",
           "cisco_ios_xr_ssh",
           "cisco_nxos_ssh",
           "cisco_asa_ssh",
           "cisco_asa_telnet",
           "cisco_asa_admin_ssh",
           "cisco_asa_child_ssh",
           "cisco_ftd_ssh",
           "cisco_nxos_aci_ssh",
           "cisco_apic_ssh",
           "cisco_apic_only_ssh",
           "cisco_sg_ssh",
           "juniper_junos_ssh",
           "juniper_srx_ssh",
           "juniper_netscreen_ssh",
           "pica8_ovs_ofctl_ssh",
           "linux_ovs_ofctl_ssh",
           "pica8_openflow_ovs_ssh",
           "linux_os_ssh",
           "f5_ssh",
           "checkpoint_ssh",
           "checkpoint_ssh_with_manager",
           "checkpoint_mgmt_api",
           "fortinet_ssh",
           "hp_comware_ssh",
           "hp_provision_ssh",
           "panos_ssh",
           "esxi_ssh",
           "vcenter_api",
           "viasat_encryptor_snmp3",
           "netscaler_ssh",
           "cumulus_ssh",
           "riverbed_steelhead_ssh",
           "riverbed_interceptor_ssh",
           "aws_api",
           "cisco_ucs_ssh",
           "nsx_api",
           "azure_api",
           "avaya_ssh",
           "avaya_telnet",
           "gcp_api",
           "silver_peak_edgeconnect_ssh",
           "silver_peak_orchestrator_api",
           "prisma_sdwan_ssh",
           "prisma_sdwan_api",
           "pensando_api",
           "forcepoint_https_api",
           "forcepoint_http_api",
           "forcepoint_ssh",
           "cisco_sdwan_ssh",
           "cisco_sdwan_vsmart_ssh",
           "bluecat_http",
           "bluecat_https",
           "nokia_ssh",
           "brocade_switch_ssh",
           "versa_flexvnf_ssh",
           "extreme_switch_ssh",
           "unknown"
         ]}
    ]
  end
end
